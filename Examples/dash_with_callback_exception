import dash
from dash import dcc, html, Input, Output, State, dash_table
import plotly.express as px
import pandas as pd
import numpy as np

# this is a sample app showing diff types of callbacks with exceptions.

# Initialize the Dash app
app = dash.Dash(__name__)

# Global variable to keep track of button clicks
click_count = 0

# Define the layout of the app
app.layout = html.Div([
    html.H1("Dash App with Error Handling"),
    
    html.Button("Generate Data", id="generate-button"),
    dcc.Graph(id="scatter-plot"),
    dash_table.DataTable(id="data-table"),
    
    html.Br(),
    html.Div(id="error-message", style={"color": "red"}),
    
    html.H2("Input and Submit"),
    dcc.Input(id="input-box", type="text"),
    html.Button("Submit", id="submit-button"),
    html.Div(id="input-result", style={"margin-top": "20px", "color": "blue"})
])

# Callback to handle data generation and plotting
@app.callback(
    Output("scatter-plot", "figure"),
    Output("data-table", "data"),
    Output("data-table", "columns"),
    Input("generate-button", "n_clicks")
)
def generate_data(n_clicks):
    global click_count
    click_count += 1
    
    if click_count % 2 == 0:
        raise Exception("data is broken")
    
    # Generate random data
    df = pd.DataFrame({
        "x": np.random.randn(100),
        "y": np.random.randn(100)
    })
    
    fig = px.scatter(df, x="x", y="y", title="Randomly Generated Data")
    
    columns = [{"name": i, "id": i} for i in df.columns]
    data = df.to_dict('records')
    
    return fig, data, columns

# Callback to handle input submission
@app.callback(
    Output("input-result", "children"),
    Input("submit-button", "n_clicks"),
    State("input-box", "value"),
    prevent_initial_call=True
)
def handle_input(n_clicks, value):
    if value == "error":
        raise Exception("input is broken")
    return value

# Run the app
if __name__ == "__main__":
    app.run_server(debug=True)
